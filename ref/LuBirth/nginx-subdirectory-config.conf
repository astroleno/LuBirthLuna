# 子目录部署 Nginx 配置示例
# 假设你的应用部署在 https://yourdomain.com/app/ 路径下

server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    # 主站点根目录
    root /www/wwwroot/yourdomain;
    index index.html;

    # 子目录应用配置
    location /app/ {
        # 指向你的应用目录（将 dist 内容上传到这里）
        alias /www/wwwroot/yourdomain/app/;
        
        # 默认文档
        index index.html;
        
        # 尝试文件查找顺序
        try_files $uri $uri/ /app/index.html;
        
        # 移除末尾斜杠重定向（可选）
        if ($uri ~ ^/app/(.*)/$) {
            return 301 /app/$1;
        }
    }

    # 静态资源缓存配置
    location ~* ^/app/.*\.(js|css|png|jpg|jpeg|webp|gif|svg|woff2|woff|ttf|eot|mp3)$ {
        alias /www/wwwroot/yourdomain/app/;
        access_log off;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        try_files $uri =404;
    }

    # 字体文件特殊处理
    location ~* ^/app/fonts/ {
        alias /www/wwwroot/yourdomain/app/fonts/;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header Access-Control-Allow-Origin "*";
        try_files $uri =404;
    }

    # 纹理和资源文件
    location ~* ^/app/(textures|data|bgm)/ {
        alias /www/wwwroot/yourdomain/app/;
        access_log off;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        try_files $uri =404;
    }

    # MP3 文件断点续传支持
    location ~* ^/app/.*\.mp3$ {
        alias /www/wwwroot/yourdomain/app/;
        add_header Accept-Ranges bytes;
        try_files $uri =404;
    }

    # 主站点其他配置（如果有其他页面）
    location / {
        try_files $uri $uri/ =404;
    }

    # gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;
}

# HTTPS 配置（推荐）
server {
    listen 443 ssl http2;
    server_name yourdomain.com www.yourdomain.com;

    # SSL 证书配置（使用宝塔面板的 Let's Encrypt）
    ssl_certificate /www/server/panel/vhost/cert/yourdomain.com/fullchain.pem;
    ssl_certificate_key /www/server/panel/vhost/cert/yourdomain.com/privkey.pem;
    
    # SSL 优化配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # 其他配置与 HTTP 版本相同
    root /www/wwwroot/yourdomain;
    index index.html;

    location /app/ {
        alias /www/wwwroot/yourdomain/app/;
        index index.html;
        try_files $uri $uri/ /app/index.html;
        
        if ($uri ~ ^/app/(.*)/$) {
            return 301 /app/$1;
        }
    }

    # 静态资源缓存配置（与 HTTP 版本相同）
    location ~* ^/app/.*\.(js|css|png|jpg|jpeg|webp|gif|svg|woff2|woff|ttf|eot|mp3)$ {
        alias /www/wwwroot/yourdomain/app/;
        access_log off;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        try_files $uri =404;
    }

    location ~* ^/app/fonts/ {
        alias /www/wwwroot/yourdomain/app/fonts/;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header Access-Control-Allow-Origin "*";
        try_files $uri =404;
    }

    location ~* ^/app/(textures|data|bgm)/ {
        alias /www/wwwroot/yourdomain/app/;
        access_log off;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        try_files $uri =404;
    }

    location ~* ^/app/.*\.mp3$ {
        alias /www/wwwroot/yourdomain/app/;
        add_header Accept-Ranges bytes;
        try_files $uri =404;
    }

    location / {
        try_files $uri $uri/ =404;
    }

    # gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;
}

# HTTP 重定向到 HTTPS
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;
    return 301 https://$server_name$request_uri;
}
